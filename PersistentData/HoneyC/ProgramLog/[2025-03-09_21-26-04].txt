--- Tokens Generated ---
Time Elapsed - 6.49 ms
Total - 270
Keyword - import
Value - "BaseLib.hc"
Scope - ;
Keyword - obj
Identifier - NumberGame
Scope - {
Keyword - val
Identifier - operators
AssignmentOperator - =
Compound - [
Value - "+"
Split - ,
Value - "-"
Split - ,
Value - "*"
Split - ,
Value - "/"
Compound - ]
Scope - ;
Keyword - var
Identifier - score
AssignmentOperator - =
Value - 0
Scope - ;
Keyword - var
Identifier - question
AssignmentOperator - =
Value - ""
Scope - ;
Keyword - var
Identifier - answer
AssignmentOperator - =
Value - 0
Scope - ;
Keyword - func
Identifier - GenQuestion
Nest - (
Nest - )
Scope - {
Keyword - var
Identifier - numOne
AssignmentOperator - =
Identifier - Random
Split - .
Identifier - RangeInt
Nest - (
MathOperator - -
Value - 10
Split - ,
Value - 11
Nest - )
Scope - ;
Keyword - var
Identifier - numTwo
AssignmentOperator - =
Identifier - Random
Split - .
Identifier - RangeInt
Nest - (
MathOperator - -
Value - 10
Split - ,
Value - 11
Nest - )
Scope - ;
Keyword - var
Identifier - op
AssignmentOperator - =
Identifier - Random
Split - .
Identifier - RangeInt
Nest - (
Value - 0
Split - ,
Value - 3
Nest - )
Scope - ;
Keyword - if
Nest - (
Identifier - op
ComparativeOperator - ==
Value - 3
LogicalOperator - &&
Nest - (
Identifier - numOne
ComparativeOperator - ==
Value - 0
LogicalOperator - ||
Identifier - numTwo
ComparativeOperator - ==
Value - 0
Nest - )
Nest - )
Scope - {
Identifier - numTwo
AssignmentOperator - +=
Value - 1
Scope - ;
Scope - }
Identifier - question
AssignmentOperator - =
Value - "{numOne} {operators[op]} {numTwo} = "
Scope - ;
Keyword - if
Nest - (
Identifier - op
ComparativeOperator - ==
Value - 0
Nest - )
Scope - {
Identifier - answer
AssignmentOperator - =
Identifier - numOne
MathOperator - +
Identifier - numTwo
Scope - ;
Scope - }
Keyword - else
Keyword - if
Nest - (
Identifier - op
ComparativeOperator - ==
Value - 1
Nest - )
Scope - {
Identifier - answer
AssignmentOperator - =
Identifier - numOne
MathOperator - -
Identifier - numTwo
Scope - ;
Scope - }
Keyword - else
Keyword - if
Nest - (
Identifier - op
ComparativeOperator - ==
Value - 2
Nest - )
Scope - {
Identifier - answer
AssignmentOperator - =
Identifier - numOne
MathOperator - *
Identifier - numTwo
Scope - ;
Scope - }
Keyword - else
Keyword - if
Nest - (
Identifier - op
ComparativeOperator - ==
Value - 3
Nest - )
Scope - {
Identifier - answer
AssignmentOperator - =
Identifier - numOne
MathOperator - /
Identifier - numTwo
Scope - ;
Scope - }
Identifier - Out
Nest - (
Value - "### Question Generated ###"
Nest - )
Scope - ;
Scope - }
Scope - }
Keyword - func
Identifier - Main
Nest - (
Nest - )
Scope - {
Identifier - Out
Nest - (
Value - "--- HoneyC Number Game ---"
Split - ,
Identifier - Colour
Split - .
Identifier - Magenta
Nest - )
Scope - ;
Keyword - var
Identifier - numGame
AssignmentOperator - =
Identifier - NumberGame
Nest - (
Nest - )
Scope - ;
Keyword - while
Nest - (
Keyword - true
Nest - )
Scope - {
Identifier - numGame
Split - .
Identifier - GenQuestion
Nest - (
Nest - )
Scope - ;
Keyword - if
Nest - (
Identifier - In
Nest - (
Identifier - numGame
Split - .
Identifier - question
Split - ,
Identifier - Colour
Split - .
Identifier - DarkBlue
Nest - )
ComparativeOperator - !=
Identifier - numGame
Split - .
Identifier - answer
Nest - )
Scope - {
Identifier - Out
Nest - (
Value - "You Stupid Idiot You Got It Wrong! Answer: {numGame.answer}"
Split - ,
Identifier - Colour
Split - .
Identifier - Magenta
Nest - )
Scope - ;
Identifier - Out
Nest - (
Value - "Final Score: {numGame.score}"
Split - ,
Identifier - Colour
Split - .
Identifier - Magenta
Nest - )
Scope - ;
Identifier - In
Nest - (
Value - "Press Enter To Play Again..."
Split - ,
Identifier - Colour
Split - .
Identifier - Magenta
Nest - )
Scope - ;
Identifier - Main
Nest - (
Nest - )
Scope - ;
Identifier - return
Scope - ;
Scope - }
Identifier - numGame
Split - .
Identifier - score
AssignmentOperator - +=
Value - 1
Scope - ;
Identifier - Out
Nest - (
Value - "Correct! Current Score: {numGame.score}"
Nest - )
Scope - ;
Scope - }
Scope - }
Identifier - Main
Nest - (
Nest - )
Scope - ;

--- Token Lines ---
Time Elapsed - 11.07 ms
Total - 46
      1. import "BaseLib.hc" ; 
[S]   2. obj NumberGame { 
      3. val operators = [ "+" , "-" , "*" , "/" ] ; 
      4. var score = 0 ; 
      5. var question = "" ; 
      6. var answer = 0 ; 
[S]   7. func GenQuestion ( ) { 
      8. var numOne = Random . RangeInt ( - 10 , 11 ) ; 
      9. var numTwo = Random . RangeInt ( - 10 , 11 ) ; 
     10. var op = Random . RangeInt ( 0 , 3 ) ; 
[S]  11. if ( op == 3 && ( numOne == 0 || numTwo == 0 ) ) { 
     12. numTwo += 1 ; 
[E]  13. } 
     14. question = "{numOne} {operators[op]} {numTwo} = " ; 
[S]  15. if ( op == 0 ) { 
     16. answer = numOne + numTwo ; 
[E]  17. } 
[S]  18. else if ( op == 1 ) { 
     19. answer = numOne - numTwo ; 
[E]  20. } 
[S]  21. else if ( op == 2 ) { 
     22. answer = numOne * numTwo ; 
[E]  23. } 
[S]  24. else if ( op == 3 ) { 
     25. answer = numOne / numTwo ; 
[E]  26. } 
     27. Out ( "### Question Generated ###" ) ; 
[E]  28. } 
[E]  29. } 
[S]  30. func Main ( ) { 
     31. Out ( "--- HoneyC Number Game ---" , Colour . Magenta ) ; 
     32. var numGame = NumberGame ( ) ; 
[S]  33. while ( true ) { 
     34. numGame . GenQuestion ( ) ; 
[S]  35. if ( In ( numGame . question , Colour . DarkBlue ) != numGame . answer ) { 
     36. Out ( "You Stupid Idiot You Got It Wrong! Answer: {numGame.answer}" , Colour . Magenta ) ; 
     37. Out ( "Final Score: {numGame.score}" , Colour . Magenta ) ; 
     38. In ( "Press Enter To Play Again..." , Colour . Magenta ) ; 
     39. Main ( ) ; 
     40. return ; 
[E]  41. } 
     42. numGame . score += 1 ; 
     43. Out ( "Correct! Current Score: {numGame.score}" ) ; 
[E]  44. } 
[E]  45. } 
     46. Main ( ) ; 

--- Bracket Data ---
Time Elapsed - 12.32 ms
Bracket - Start: 2, End: 3, Line: 7, IsFuncCall: True, IsFuncDef: True
Bracket - Start: 4, End: 9, Line: 8, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 4, End: 9, Line: 9, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 4, End: 8, Line: 10, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 6, End: 14, Line: 11, IsFuncCall: False
Bracket - Start: 1, End: 15, Line: 11, IsFuncCall: False
Bracket - Start: 1, End: 5, Line: 15, IsFuncCall: False
Bracket - Start: 2, End: 6, Line: 18, IsFuncCall: False
Bracket - Start: 2, End: 6, Line: 21, IsFuncCall: False
Bracket - Start: 2, End: 6, Line: 24, IsFuncCall: False
Bracket - Start: 1, End: 3, Line: 27, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 2, End: 3, Line: 30, IsFuncCall: True, IsFuncDef: True
Bracket - Start: 1, End: 5, Line: 31, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 4, End: 5, Line: 32, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 3, Line: 33, IsFuncCall: False
Bracket - Start: 1, End: 2, Line: 34, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 3, End: 7, Line: 35, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 5, Line: 35, IsFuncCall: False
Bracket - Start: 1, End: 5, Line: 36, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 5, Line: 37, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 5, Line: 38, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 2, Line: 39, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 3, Line: 43, IsFuncCall: True, IsFuncDef: False
Bracket - Start: 1, End: 2, Line: 46, IsFuncCall: True, IsFuncDef: False

--- Grouped Token Lines ---
Time Elapsed - 14.74 ms
Total - 46
      1. import "BaseLib.hc" ; 
[S]   2. obj NumberGame { 
      3. val operators = [ "+" , "-" , "*" , "/" ] ; 
      4. var score = 0 ; 
      5. var question = "" ; 
      6. var answer = 0 ; 
[S]   7. func GenQuestion ( ) { 
              ^^^^^^^^^^^^^^^   
      8. var numOne = Random.RangeInt ( - 10 , 11 ) ; 
                                        ^^^^        
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
      9. var numTwo = Random.RangeInt ( - 10 , 11 ) ; 
                                        ^^^^        
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
     10. var op = Random.RangeInt ( 0 , 3 ) ; 
                  ^^^^^^^^^^^^^^^^^^^^^^^^^   
[S]  11. if ( op == 3 && ( numOne == 0 || numTwo == 0 ) ) { 
     12. numTwo += 1 ; 
[E]  13. } 
     14. question = "{numOne} {operators[op]} {numTwo} = " ; 
[S]  15. if ( op == 0 ) { 
     16. answer = numOne + numTwo ; 
                  ^^^^^^^^^^^^^^^   
[E]  17. } 
[S]  18. else if ( op == 1 ) { 
     19. answer = numOne - numTwo ; 
                  ^^^^^^^^^^^^^^^   
[E]  20. } 
[S]  21. else if ( op == 2 ) { 
     22. answer = numOne * numTwo ; 
                  ^^^^^^^^^^^^^^^   
[E]  23. } 
[S]  24. else if ( op == 3 ) { 
     25. answer = numOne / numTwo ; 
                  ^^^^^^^^^^^^^^^   
[E]  26. } 
     27. Out ( "### Question Generated ###" ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
[E]  28. } 
[E]  29. } 
[S]  30. func Main ( ) { 
              ^^^^^^^^   
     31. Out ( "--- HoneyC Number Game ---" , Colour.Magenta ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
     32. var numGame = NumberGame ( ) ; 
                       ^^^^^^^^^^^^^^   
[S]  33. while ( true ) { 
     34. numGame.GenQuestion ( ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^   
[S]  35. if ( In ( numGame.question , Colour.DarkBlue ) != numGame.answer ) { 
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                       
     36. Out ( "You Stupid Idiot You Got It Wrong! Answer: {numGame.answer}" , Colour.Magenta ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
     37. Out ( "Final Score: {numGame.score}" , Colour.Magenta ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
     38. In ( "Press Enter To Play Again..." , Colour.Magenta ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
     39. Main ( ) ; 
         ^^^^^^^^   
     40. return ; 
[E]  41. } 
     42. numGame.score += 1 ; 
     43. Out ( "Correct! Current Score: {numGame.score}" ) ; 
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
[E]  44. } 
[E]  45. } 
     46. Main ( ) ; 
         ^^^^^^^^   

--- Purposed Token Lines ---
Time Elapsed - 15.51 ms
Total - 46
Import              1. import "BaseLib.hc" ; 
Object        [S]   2. obj NumberGame { 
None                3. val operators = [ "+" , "-" , "*" , "/" ] ; 
Assignment          4. var score = 0 ; 
Assignment          5. var question = "" ; 
Assignment          6. var answer = 0 ; 
Function      [S]   7. func GenQuestion ( ) { 
                            ^^^^^^^^^^^^^^^   
Assignment          8. var numOne = Random.RangeInt ( - 10 , 11 ) ; 
                                                      ^^^^        
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
Assignment          9. var numTwo = Random.RangeInt ( - 10 , 11 ) ; 
                                                      ^^^^        
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
Assignment         10. var op = Random.RangeInt ( 0 , 3 ) ; 
                                ^^^^^^^^^^^^^^^^^^^^^^^^^   
None          [S]  11. if ( op == 3 && ( numOne == 0 || numTwo == 0 ) ) { 
None               12. numTwo += 1 ; 
LineLoopEnd   [E]  13. } 
Assignment         14. question = "{numOne} {operators[op]} {numTwo} = " ; 
None          [S]  15. if ( op == 0 ) { 
Assignment         16. answer = numOne + numTwo ; 
                                ^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  17. } 
None          [S]  18. else if ( op == 1 ) { 
Assignment         19. answer = numOne - numTwo ; 
                                ^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  20. } 
None          [S]  21. else if ( op == 2 ) { 
Assignment         22. answer = numOne * numTwo ; 
                                ^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  23. } 
None          [S]  24. else if ( op == 3 ) { 
Assignment         25. answer = numOne / numTwo ; 
                                ^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  26. } 
FunctionCall       27. Out ( "### Question Generated ###" ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  28. } 
LineLoopEnd   [E]  29. } 
Function      [S]  30. func Main ( ) { 
                            ^^^^^^^^   
FunctionCall       31. Out ( "--- HoneyC Number Game ---" , Colour.Magenta ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
Assignment         32. var numGame = NumberGame ( ) ; 
                                     ^^^^^^^^^^^^^^   
None          [S]  33. while ( true ) { 
FunctionCall       34. numGame.GenQuestion ( ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^   
None          [S]  35. if ( In ( numGame.question , Colour.DarkBlue ) != numGame.answer ) { 
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                       
FunctionCall       36. Out ( "You Stupid Idiot You Got It Wrong! Answer: {numGame.answer}" , Colour.Magenta ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
FunctionCall       37. Out ( "Final Score: {numGame.score}" , Colour.Magenta ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
FunctionCall       38. In ( "Press Enter To Play Again..." , Colour.Magenta ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
FunctionCall       39. Main ( ) ; 
                       ^^^^^^^^   
None               40. return ; 
LineLoopEnd   [E]  41. } 
None               42. numGame.score += 1 ; 
FunctionCall       43. Out ( "Correct! Current Score: {numGame.score}" ) ; 
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   
LineLoopEnd   [E]  44. } 
LineLoopEnd   [E]  45. } 
FunctionCall       46. Main ( ) ; 
                       ^^^^^^^^   

--- Program Info ---
Time Elapsed - 16.34 ms

